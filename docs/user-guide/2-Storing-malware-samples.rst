2. Storing malware samples
==========================

Objects in MWDB are divided into three types: files, configurations and blobs.

File is the primary object type in MWDB, used for storing malware samples and artifacts in various forms e.g. binaries, memory dumps, archives, scripts, .eml/.msg mail files etc.

File attributes
---------------

Files are described by the following attributes:


* **File name**\ : original sample name
* **File size**\ : file size in bytes
* **File type**\ : file type returned by Unix ``file`` command
* **MD5**\ , **SHA1**\ , **SHA256**\ , **SHA512** - hash digest from file contents that can be used as object reference
* **CRC32** - CRC32 file checksum
* **ssdeep** - ssdeep fuzzy hash value
* **Upload time** - timestamp of first file upload

Objects in MWDB are mostly identified by SHA256 hash. The special case are files that can be referenced by other hashes like MD5, SHA1 and SHA512.


.. image:: ../_static/O5rpztK.png
   :target: ../_static/O5rpztK.png
   :alt: sample attributes

.. warning::

   The main hash used for identifying objects in MWDB is **SHA256**. MD5 works only for files and may not work in all contexts.
   
Uploading a file
----------------

The most simple way to upload new file to MWDB is to use the **Upload** view accessible from the navbar.


.. image:: ../_static/Ni0YEvP.png
   :target: ../_static/Ni0YEvP.png
   :alt: sample upload view


Here we can choose the file to upload including additional options:


* **Parent**\ : SHA256 parent identifier
* **Share with**\ : Groups that we can share our object and all decendants with

  * **All my groups** - default option, share objects with all our groups
  * **Single group...** - shares objects with specified group by name
  * **Everybody** - adds objects to public feed (sharing with ``public`` group)
  * **Only me** - shares objects only with user's private group

* **Add attributes**\ : Additional attributes that will be added to the uploaded sample

All of these options are optional and will be described in further chapters. If you are already intrigued what are attributes and how sharing model works, you can jump to :ref:`6. Object attributes` and :ref:`9. Sharing objects with other collaborators`.

After upload, we're redirected to the detailed file view. It can be filled up with data if the file already existed before being added.


.. image:: ../_static/whJxE0j.png
   :target: ../_static/whJxE0j.png
   :alt: sample detailed view


Uploading child file
--------------------

Sometimes we want to add the file that is related to the file added previously e.g. after adding eml file we want to add the attachment contained there. In that case, we can **Upload child** button.


.. image:: ../_static/dFVLJcn.png
   :target: ../_static/dFVLJcn.png
   :alt: upload child button


**Upload child** button navigates to the **Upload** page with already filled **Parent** field with parent identifier we want to attach to uploaded object.


.. image:: ../_static/9YxsVFS.png
   :target: ../_static/9YxsVFS.png
   :alt: sample upload view with parent


After uploading a child, we're redirected to the uploaded sample view with our parent added to ``Related samples`` section.


.. image:: ../_static/PfkGlv2.png
   :target: ../_static/PfkGlv2.png
   :alt: relationships with sample

Using that feature we can chain together various files extracted during the analysis. Example above shows the relations between archive, executable file contained there (`agenttesla` malicious binary) and unpacked memory dump from execution. Finally, from both of these dumps we got a malware configuration.
