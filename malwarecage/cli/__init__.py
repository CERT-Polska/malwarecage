import click
from flask.cli import FlaskGroup
import textwrap

from malwarecage.core.config import app_config

from .configuration import create_configuration
from .database import configure_database


def create_app():
    try:
        app_config.read()
    except Exception as e:
        click.echo(textwrap.dedent("""
        [!] Missing Malwarecage configuration.
        
        Use 'malwarecage configure' to setup your Malwarecage instance.
        """))
        raise click.Abort()

    from .. import app
    return app.app


@click.group(cls=FlaskGroup, create_app=create_app, add_version_option=False)
@click.pass_context
def cli(ctx):
    """Malwarecage malware database"""


@cli.command("build-web")
@click.option("--target-dir",
              type=click.Path(),
              default=app_config.malwarecage.web_folder,
              show_default=True,
              help="Build target directory to be overwritten.",
              required=True)
def build_web(target_dir):
    """
    Rebuild Malwarecage web application files.

    By default Malwarecage serves pre-built web application bundle, but if
    you want to use web plugins: web need to be rebuilt from sources.

    Command requires Node.js and npm to be installed.
    """
    from malwarecage.cli.web import npm_build_web
    npm_build_web(target_dir)

    if app_config.malwarecage.web_folder != target_dir:
        click.echo(textwrap.dedent(f"""
        [!] Build target directory differs from directory set in configuration
            ({target_dir} != {app_config.malwarecage.web_folder})
            Put the following line in malwarecage.ini file to serve web app from new location:

            web_folder = {target_dir}
        """), err=True)


@cli.command("configure", with_appcontext=False)
@click.option("--quiet", "-q",
              is_flag=True,
              help="Unattended (quiet) configuration.")
@click.pass_context
def configure(ctx, quiet):
    """
    Configure Malwarecage instance.
    """
    try:
        app_config.read()
    except Exception as e:
        if quiet:
            click.echo("[!] Correct configuration must be provided via env vars in unattended mode!", err=True)
            ctx.abort()
        create_configuration()
    finally:
        click.echo("[+] Configuration already initialized... skipping")

    # Load application
    app = create_app()
    with app.app_context():
        configure_database()

    click.echo(textwrap.dedent("""
    Malwarecage configured successfully!
    
    Use 'malwarecage run' to run the server.
    """))
