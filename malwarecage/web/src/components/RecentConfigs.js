import React from 'react';

import { RecentView, RecentRow } from "./RecentView";
import { TagList } from './Tag';

import { DateString, ObjectLink } from "@malwarefront/ui";

function RecentConfigRow(props) {
    const family = (
        <div className="recent-field">    
            <a href="#query" onClick={(ev) => { 
                ev.preventDefault(); 
                props.addToQuery("family", props.family)
            }}>
                {props.family}
            </a>
        </div>
    )
    const configId = (
        <div className="recent-field">
            <ObjectLink type="static_config" id={props.id}/>
        </div>
    )
    const configType = (
        <div className="recent-field">
            <a href="#query" onClick={(ev) => { 
                ev.preventDefault(); 
                props.addToQuery("type", props.config_type)
            }}>
                {props.config_type}
            </a>
        </div>
    )
    const uploadDate = (
        <div className="recent-field">
            <DateString date={props.upload_time}/>
        </div>
    )
    const tags = (
        <TagList tags={props.tags}
                 tagClick={(ev, tag) => { ev.preventDefault(); props.addToQuery("tag", tag) }}
                 tagRemove={(ev, tag) => props.addToQuery("NOT tag", tag)}
                 filterable/>
    )

    return (
        <RecentRow firstSeen={props.upload_time}>
            <td className="col-lg-1 col-6">
                {/* Shrinked mode */}
                <div className="d-lg-none d-flex">
                    <b style={{minWidth: "4.5rem"}}>Family: </b>
                    {family}
                </div>
                <div className="d-lg-none d-flex">
                    <b style={{minWidth: "4.5rem"}}>ID: </b>
                    {configId}
                </div>
                {/* Wide mode */}
                <div className="d-none d-lg-flex">
                    {family}
                </div>
            </td>
            <td className="col-lg-4 col-6">
                {/* Shrinked mode */}
                <div className="d-lg-none d-flex">
                    <b style={{minWidth: "3rem"}}>Type: </b>
                    {configType}
                </div>
                <div className="d-lg-none d-flex">
                    <b style={{minWidth: "3rem"}}>Date: </b>
                    {uploadDate}
                </div>
                <div className="d-lg-none">
                    {tags}
                </div>
                {/* Wide mode */}
                <div className="d-none d-lg-flex">
                    {configId}
                </div>
            </td>
            <td className="col-lg-1 d-none d-lg-block">
                {configType}
            </td>
            <td className="col-lg-4 d-none d-lg-block">
                {tags}
            </td>
            <td className="col-lg-2 d-none d-lg-block">
                {uploadDate}
            </td>
        </RecentRow>
    )
}

function RecentConfigHeader() {
    return (
        <tr className="d-flex">
            {/* Shrinked mode */}
            <th className="col-6 d-lg-none">Family/Config ID</th>
            <th className="col-6 d-lg-none">Type/First seen/Tags</th>
            {/* Wide mode */}
            <th className="col-1 d-none d-lg-block">Family</th>
            <th className="col-4 d-none d-lg-block">Config ID</th>
            <th className="col-1 d-none d-lg-block">Config type</th>
            <th className="col-4 d-none d-lg-block">Tags</th>
            <th className="col-2 d-none d-lg-block">First seen</th>
        </tr>
    )
}

export default (props) => (
    <RecentView type="config" 
                rowComponent={RecentConfigRow} 
                headerComponent={RecentConfigHeader}
                dhashOnly 
                {...props}/>
)
