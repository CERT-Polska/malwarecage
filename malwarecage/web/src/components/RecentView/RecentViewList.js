import React, {useState, useEffect, useRef} from 'react';
import InfiniteScroll from 'react-infinite-scroller';

import api from "@malwarefront/api";


export default function RecentViewList(props) {
    const infiniteScroll = useRef(null);
    // Loaded object items
    let [elements, setElements] = useState([]);
    // Loaded page number
    let [loadedPages, setLoadedPages] = useState(0);
    // Page number to be loaded
    let [pageToLoad, setPageToLoad] = useState(1);
    // There are more pages to load
    let [hasMorePages, setHasMorePages] = useState(false);
    // If query changes, reset state
    useEffect(() => {
        if(infiniteScroll.current)
            infiniteScroll.current.pageLoaded = 0;
        setLoadedPages(0);
        setElements([]);
        setPageToLoad(1);
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [props.query])

    // Load page on request (pageToLoad != loadedPages)
    useEffect(() => {
        let cancelled = false;
        if(loadedPages === pageToLoad)
            // Already synchronized: nothing to load
            return;
        const pivot = elements.slice(-1)[0]
        api.getObjectList(
            props.type,
            pivot && pivot.id,
            props.query
        ).then(response => {
            if(cancelled)
                return;
            const loadedElements = response.data[`${props.type}s`]
            setElements(elements => [...elements, ...loadedElements]);
            setHasMorePages(loadedElements.length !== 0);
        }).catch(error => {
            if(cancelled)
                return;
            props.setError(error);
            setHasMorePages(false);
        }).finally(() => {
            if(cancelled)
                return;
            setLoadedPages(loadedPages => loadedPages + 1);
        });
        return () => {cancelled = true};
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, [pageToLoad, loadedPages])

    let ObjectRow = props.objectRow;

    return (
        <table className="table table-striped table-bordered wrap-table"
               style={props.locked ? {pointerEvents: "none", filter: "blur(4px)"} : {}}>
            <thead>
                <tr className="d-flex">
                    {ObjectRow.labels.map(f => <th key={f} className="col">{f}</th>)}
                </tr>
            </thead>
            <InfiniteScroll
                ref={infiniteScroll}
                loadMore={(page) => {
                    setPageToLoad(loadedPages + 1)
                }}
                hasMore={
                    // We want to load pages sequentially
                    // Don't spawn new callbacks during pending load operation (pageToLoad !== loadedPages)
                    hasMorePages && pageToLoad === loadedPages
                }
                element={'tbody'}>
                {
                    elements.map((item, idx) => <ObjectRow key={idx} addToQuery={props.addToQuery} {...item}/>)
                }
                {
                    pageToLoad !== loadedPages
                    ? (
                        <tr key="loading">
                            <td colSpan={ObjectRow.labels.length}>
                                Loading...
                            </td>
                        </tr> 
                    ) : []
                }
            </InfiniteScroll>
        </table>
    )
}
