import React, {Component} from 'react';

import { ConfirmationModal } from "@malwarefront/ui";
import api from "@malwarefront/api";

import QuickQueryAddModal from "./QuickQueryAddModal";


class QuickQuery extends Component {
    state = {
        queries: [],
        quickQueryId: null,
        isAddModalOpen: false,
        isDeleteModalOpen: false,
        modalError: ""
    }

    getQuickQueries = async () => {
        try {
            let response = await api.getQuickQueries(this.props.type)
            this.setState({queries: response.data})
        } catch (error) {
            console.log(error)
        }
    }

    componentDidMount() {
        this.getQuickQueries()
    }

    submitQuickQuery = async (name) => {
        if (!this.props.query || this.props.queryError !== false) {
            this.setState({modalError: "You can't save empty or broken query. Search with it first."})
        } else {
            try {
                await api.addQuickQuery(
                    this.props.type,
                    name,
                    this.props.query
                    )
                this.getQuickQueries()
                this.setState(
                    {
                        isAddModalOpen: false,
                        modalError:""
                    })
            } catch (error) {
                this.setState({modalError: error})
            }
        }
    }

    deleteQuery = async (id) => {
        await api.deleteQuickQuery(id)
        this.setState({quickQueryId: null, isDeleteModalOpen: false})
        this.getQuickQueries()
    }

    handleError = (error) => {
        this.setState({modalError: error});
    }

    render() {
        let queryBadges = Object(this.state.queries).sort((a, b) => a.id - b.id).map((v) =>
                <span key={v.id} className="badge bg-dark" style={{"cursor": "pointer", "color":"white"}}>
                    <span
                      data-toggle="tooltip"
                      title="Add the Quick query to your search or click on x to delete it"
                      onClick={(ev) => {ev.preventDefault();this.props.submitQuery(v.query)}}>
                    {v.name}{" "}
                    </span>
                    <span data-toggle="tooltip"
                          title="Delete Quick query."
                          onClick={(ev) => {
                              ev.preventDefault();
                              this.setState(
                                  {
                                      isDeleteModalOpen: true,
                                      quickQueryId: v.id,
                                  });
                          }}>
                        x
                    </span>
                </span>
        )
        console.log(this.props.queryError)
        let newButtonTittle = (!this.props.queryError ? "Save current search as Quick query"
            : "Please provide correct query first")

        let newButtonBadge = (!this.props.queryError ? "success" : "secondary")

        const newQuickQueryButton = (
            <span className={`badge bg-${newButtonBadge}`} style={{"cursor": "pointer"}}
                  data-toggle="tooltip"
                  title={newButtonTittle}
                  onClick={(ev) => {
                      ev.preventDefault();
                      this.setState({isAddModalOpen: true});
                  }}>Add +</span>
        )
        let deleteQuickQueryModal = (<ConfirmationModal buttonStyle="btn-success"
                               confirmText="Yes"
                               message="Are you sure you want to delete this quick query?"
                               isOpen={this.state.isDeleteModalOpen}
                               onRequestClose={() => this.setState({isDeleteModalOpen: false})}
                               onConfirm={(ev) => {
                                   ev.preventDefault();
                                   this.deleteQuery(this.state.quickQueryId)
                               }}/>)
        return (
            <span>
                {queryBadges}{newQuickQueryButton}{deleteQuickQueryModal}
                <QuickQueryAddModal isOpen={this.state.isAddModalOpen}
                                    query = {this.props.query}
                                    error={this.state.modalError}
                                    onError={this.handleError}
                                    onSubmit={this.submitQuickQuery}
                                    onRequestModalClose={
                                    () => this.setState({
                                        isAddModalOpen: false,
                                        modalError: ""
                                    })
                               }/>
            </span>
        )
    }
}

export default QuickQuery;
