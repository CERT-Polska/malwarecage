import React, {Component} from 'react';

import {FontAwesomeIcon} from '@fortawesome/react-fontawesome'
import {faEdit} from "@fortawesome/free-solid-svg-icons"
import api from "@malwarefront/api";

import QueryAddModal from "./QueryAddModal";


class QuickQuery extends Component {
    state = {
        queries: [],
        quickQuery: {},
        isModalOpen: false,
        isEditModalOpen: false,
        modalError: ""
    }

    getQueries = async () => {
        try {
            let response = await api.getQueries(this.props.type)
            this.setState({queries: response.data})
        } catch (error) {
            console.log(error)
        }
    }

    componentDidMount() {
        this.getQueries()
    }

    submitQuickQuery = async () => {
        if (!this.state.quickQuery.query || !this.state.quickQuery.name) {
            this.setState({modalError: "You can't save empty or unnamed query"})
        } else if (this.state.queries.length >= 15 ){
            this.setState({modalError: "Too much queries is saved right now, delete any of them."})
        } else {
            try {
                if (this.state.quickQuery.id) {
                    await api.updateQuery(
                        this.state.quickQuery.id,
                        this.props.type ,
                        this.state.quickQuery.name,
                        this.state.quickQuery.query
                    )
                } else {
                    await api.addQuery(
                        this.props.type ,
                        this.state.quickQuery.name,
                        this.state.quickQuery.query
                    )
                }

                this.getQueries()
                this.setState(
                    {
                        isModalOpen: false,
                        modalError:""
                    })
            } catch (error) {
                this.setState({modalError: error})
            }
        }
    }

    deleteQuery = async (id) => {
        await api.deleteQuery(id)
        this.setState({isModalOpen: false})
        this.getQueries()
    }

    handleError = (error) => {
        this.setState({modalError: error});
    }

    handleUpdateCustomQuery = (event) => {
        const {name, value} = event.target
        this.setState(prevState => (
            {
                quickQuery : {
                    ...prevState.quickQuery,
                    [name]: value
                }
            })
        )
    }

    render() {
        let queryBadges = Object(this.state.queries).sort((a, b) => a.id - b.id).map((v) =>
                <span key={v.id} className="badge badge-info" style={{"cursor": "pointer"}}>
                    <span
                      data-toggle="tooltip"
                      title="Add the Quick query to your search or click on the edit to update it"
                      onClick={(ev) => {ev.preventDefault();this.props.submitQuery(v.query)}}>
                    {v.name}{" "}
                    </span>
                    <span data-toggle="tooltip"
                          title="Edit Quick query."
                          onClick={(ev) => {
                              ev.preventDefault();
                              this.setState(
                                  {
                                      quickQuery: v,
                                      isModalOpen: true
                                  })
                          }}>
                        <FontAwesomeIcon icon={faEdit} pull="right" size="1x"/>
                    </span>
                </span>
        )

        let newButtonTittle = (this.state.queries.length < 15 ? "Save current search as Quick query"
            : "You can only have ten queries saved at a time, please delete any of them to save new ones")

        let newButtonBadge = (this.state.queries.length < 15 ? "info" : "secondary")

        const newQuickQueryButton = (
            <span className={`badge badge-${newButtonBadge}`} style={{"cursor": "pointer"}}
                  data-toggle="tooltip"
                  title={newButtonTittle}
                  onClick={(ev) => {
                      ev.preventDefault();
                      if (this.state.queries.length < 15)
                          this.setState(
                              {
                                  quickQuery: {name: "", query: this.props.query},
                                  isModalOpen: true
                              });
                  }}>+</span>
        )

        return (
            <span>
                {queryBadges}{newQuickQueryButton}
                <QueryAddModal isOpen={this.state.isModalOpen}
                           quickQuery = {this.state.quickQuery}
                           updateQueryValue = {this.handleUpdateCustomQuery}
                           error={this.state.modalError}
                           onError={this.handleError}
                           onSubmit={this.submitQuickQuery}
                           deleteQuery={this.deleteQuery}
                           onRequestModalClose={
                               () => this.setState({
                                   isModalOpen: false,
                                   modalError: ""
                               })
                           }/>
            </span>
        )
    }
}

export default QuickQuery;
